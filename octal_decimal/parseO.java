
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package octal_decimal;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parseO extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parseO() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parseO(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parseO(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\006\000\002\002\004\000\002\004\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\006\003\006\004\010\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\006\002\000\004\010\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\004\002\011\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\002\001" +
    "\001\002\000\006\002\uffff\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\010\002\004\003\003\004\006\001\001\000" +
    "\002\001\001\000\004\003\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parseO$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parseO$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parseO$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
            String error =" ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";
        System.out.println(error);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            String error =" ERROR Sintactico en token: "+s.value+" en linea: " +(s.left + 1 )+" y columna: "+(s.right + 1)+"\n";    
        System.out.println(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parseO$actions {
  private final parseO parser;

  /** Constructor */
  CUP$parseO$actions(parseO parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parseO$do_action_part00000000(
    int                        CUP$parseO$act_num,
    java_cup.runtime.lr_parser CUP$parseO$parser,
    java.util.Stack            CUP$parseO$stack,
    int                        CUP$parseO$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parseO$result;

      /* select the action based on the action number */
      switch (CUP$parseO$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$parseO$stack.elementAt(CUP$parseO$top-1)).value;
		RESULT = start_val;
              CUP$parseO$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parseO$parser.done_parsing();
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= octales 
            {
              Integer RESULT =null;
		int ocsleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int ocsright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Integer ocs = (Integer)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
        System.out.println("");
        System.out.println("Numero octal en decimal-> "+ocs);

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("s",2, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // octales ::= octales octal 
            {
              Integer RESULT =null;
		int ocsleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).left;
		int ocsright = ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)).right;
		Integer ocs = (Integer)((java_cup.runtime.Symbol) CUP$parseO$stack.elementAt(CUP$parseO$top-1)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Integer oc = (Integer)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
        int ocs2=(ocs*8)+oc;
        RESULT =ocs2;
        System.out.println("\t \\");
        System.out.println("\t"+ocs+" <- octales1");
        System.out.println("\t"+oc+" <- octal");
        System.out.println("\t\t \\");
        System.out.println("\t\t"+ocs2+" <- octales");


              CUP$parseO$result = parser.getSymbolFactory().newSymbol("octales",0, ((java_cup.runtime.Symbol)CUP$parseO$stack.elementAt(CUP$parseO$top-1)), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // octales ::= octal 
            {
              Integer RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		Integer oc = (Integer)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
        RESULT =oc;
        System.out.println("\t \\");
        System.out.println("\t"+oc+" <- octal");

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("octales",0, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // octales ::= error 
            {
              Integer RESULT =null;
		
        RESULT=0;

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("octales",0, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // octal ::= numeroOctal 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parseO$stack.peek()).value;
		
        RESULT =new Integer(num);
        System.out.println(num+" <- numero");

              CUP$parseO$result = parser.getSymbolFactory().newSymbol("octal",1, ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), ((java_cup.runtime.Symbol)CUP$parseO$stack.peek()), RESULT);
            }
          return CUP$parseO$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parseO$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parseO$do_action(
    int                        CUP$parseO$act_num,
    java_cup.runtime.lr_parser CUP$parseO$parser,
    java.util.Stack            CUP$parseO$stack,
    int                        CUP$parseO$top)
    throws java.lang.Exception
    {
              return CUP$parseO$do_action_part00000000(
                               CUP$parseO$act_num,
                               CUP$parseO$parser,
                               CUP$parseO$stack,
                               CUP$parseO$top);
    }
}

}
